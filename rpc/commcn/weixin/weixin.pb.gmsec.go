// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package weixin

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	// Oauth 微信授权获取登录信息
	Oauth(ctx context.Context, in *OauthReq, opts ...grpc.CallOption) (*OauthResp, error)
	UpdateUserInfo(ctx context.Context, in *WxUserinfo, opts ...grpc.CallOption) (*WxUserinfoResp, error)
}

type helloClient struct {
	cc client.Client
}

// GetHelloName get client name(package.class)
func GetHelloName() string {
	return "weixin.Hello"
}

// GetHelloClient get client by clientname
func GetHelloClient() HelloClient {
	cc := micro.GetClient(GetHelloName())
	return &helloClient{cc}
}

// GetHelloClientByName get client by custom name
func GetHelloClientByName(name string) HelloClient {
	cc := micro.GetClient(name)
	return &helloClient{cc}
}

func NewHelloClient(cc client.Client) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Oauth(ctx context.Context, in *OauthReq, opts ...grpc.CallOption) (*OauthResp, error) {
	conn, err := c.cc.Next()
	defer conn.Close()
	if err != nil {
		return nil, err
	}
	out := new(OauthResp)
	err = conn.Invoke(ctx, "/weixin.Hello/Oauth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) UpdateUserInfo(ctx context.Context, in *WxUserinfo, opts ...grpc.CallOption) (*WxUserinfoResp, error) {
	conn, err := c.cc.Next()
	defer conn.Close()
	if err != nil {
		return nil, err
	}
	out := new(WxUserinfoResp)
	err = conn.Invoke(ctx, "/weixin.Hello/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	// Oauth 微信授权获取登录信息
	Oauth(context.Context, *OauthReq) (*OauthResp, error)
	UpdateUserInfo(context.Context, *WxUserinfo) (*WxUserinfoResp, error)
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) Oauth(context.Context, *OauthReq) (*OauthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oauth not implemented")
}
func (*UnimplementedHelloServer) UpdateUserInfo(context.Context, *WxUserinfo) (*WxUserinfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}

func RegisterHelloServer(s server.Server, srv HelloServer) {
	s.GetServer().RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Oauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Oauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weixin.Hello/Oauth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Oauth(ctx, req.(*OauthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxUserinfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weixin.Hello/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).UpdateUserInfo(ctx, req.(*WxUserinfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weixin.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Oauth",
			Handler:    _Hello_Oauth_Handler,
		},
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Hello_UpdateUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commcn/weixin.proto",
}
