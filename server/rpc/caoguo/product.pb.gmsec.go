// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package caoguo

import (
	context "context"
	micro "github.com/gmsec/micro"
	client "github.com/gmsec/micro/client"
	server "github.com/gmsec/micro/server"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "caoguo/rpc/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface
var _ server.Server
var _ client.Client
var _ micro.Service

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProductServerClient is the client API for ProductServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProductServerClient interface {
	// Oauth 添加一个产品(可能更新)
	ReplaceProduct(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*common.ResultResp, error)
}

type productServerClient struct {
	cc client.Client
}

// GetProductServerName get client name(package.class)
func GetProductServerName() string {
	return "caoguo.ProductServer"
}

// GetProductServerClient get client by clientname
func GetProductServerClient() ProductServerClient {
	cc := micro.GetClient(GetProductServerName())
	return &productServerClient{cc}
}

// GetProductServerClientByName get client by custom name
func GetProductServerClientByName(name string) ProductServerClient {
	cc := micro.GetClient(name)
	return &productServerClient{cc}
}

func NewProductServerClient(cc client.Client) ProductServerClient {
	return &productServerClient{cc}
}

func (c *productServerClient) ReplaceProduct(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*common.ResultResp, error) {
	conn, err := c.cc.Next()
	defer conn.Close()
	if err != nil {
		return nil, err
	}
	out := new(common.ResultResp)
	err = conn.Invoke(ctx, "/caoguo.ProductServer/ReplaceProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServerServer is the server API for ProductServer service.
type ProductServerServer interface {
	// Oauth 添加一个产品(可能更新)
	ReplaceProduct(context.Context, *AddReq) (*common.ResultResp, error)
}

// UnimplementedProductServerServer can be embedded to have forward compatible implementations.
type UnimplementedProductServerServer struct {
}

func (*UnimplementedProductServerServer) ReplaceProduct(context.Context, *AddReq) (*common.ResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceProduct not implemented")
}

func RegisterProductServerServer(s server.Server, srv ProductServerServer) {
	s.GetServer().RegisterService(&_ProductServer_serviceDesc, srv)
}

func _ProductServer_ReplaceProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServerServer).ReplaceProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/caoguo.ProductServer/ReplaceProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServerServer).ReplaceProduct(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProductServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "caoguo.ProductServer",
	HandlerType: (*ProductServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReplaceProduct",
			Handler:    _ProductServer_ReplaceProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "caoguo/product.proto",
}
